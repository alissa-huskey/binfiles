#!/usr/bin/env bash
#
# plutil wrapper -- avoid accidentally overwriting plist files.
#
#    The normal plutil behavior when running a write command is to overwrite
#    the original file unless specified with the -o OUTFILE or -e EXTENSION
#    options. To write to stdout you must pass the options: -o -
#
#    That is... nuts.
#
#    This script will not overwrite the original file unless you pass the
#    new option: -i|--in-place 
#
#    By default output will be printed to stdout.
#
#    All other options and arguments are passed through to the original plutil
#    command, so everything else should be the same.
#

# usage: run cmd [arg...]
#   execute or print command and args
run() {
  # print command in dry run or verbose mode
  if [[ $is_dryrun ]] || [[ $is_verbose ]]; then
    printf "\e[2m> %s\e[0m\n" "${*//$TMPDIR/\$TMPDIR/}"
  fi

  # all done if this is a dry run
  [[ $is_dryrun ]] && return

  # otherwise, run the command
  "$@" || exit $?
}

# usage: getargs
#   parse arguments -- set variables based on options
#                      and add all to be forwarded to the args array
getargs() {
  while [[ $# -ne 0 ]]; do
    case "$1" in
      -h|-*help)                                  do_help                           ;;
      -u|--dry-run)                               is_dryrun=true                    ;;
      -V|--verbose)                               is_verbose=true                   ;;
      -convert|-insert|-remove|-replace|-extract) is_write=true keep=true           ;;
      -i|--in-place)                              has_inplace_flag=true             ;;
      -o|-e)                                      has_outflag=true keep=true        ;;
      *)                                          keep=true                         ;;
    esac

    if [[ $keep ]]; then
      args+=( "$1" )
      unset keep
    fi

    shift
  done
}

# usage: do_help
#   run plutil help, plus print wrapper options then exit
do_help() {
  /usr/bin/plutil -help

  cat <<HELP
Options added by plutil wrapper:
 -i                            modify original file in place
 -V|--verbose                  print plutil command before running
 -u|--dry-run                  don't run plutil command, just print it
HELP

  exit
}

main() {
  local -a args

  getargs ${1:+"$@"}

  if ! [[ $has_inplace_flag ]] && [[ ! $has_outflag ]] && [[ $is_write ]]; then
    args+=( -o - )
  fi

  run /usr/bin/plutil "${args[@]}"
}

main ${1:+"$@"}
